/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'ru.vyarus.mkdocs-build' version '3.0.0'
}

description = 'Template for a Java application'
version = '0.1'

sonar {
    properties {
        property('sonar.projectName', 'java-starter-app')
        property('sonar.projectDescription', 'Template for a Java application')
        property('sonar.projectKey', 'java-starter-app')
        property('sonar.sources', 'src/main')
        property('sonar.tests', 'src/test')
        property('sonar.coverage.jacoco.xmlReportPath', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacoco {
    toolVersion = '0.8.11'
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation project(':java-starter-lib')
}

application {
    // Define the main class for the application.
    mainClass = 'hello.world.GreetingApp'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.jar {
    manifest.attributes["Main-Class"] = "hello.world.GreetingApp"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
